// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.6
// source: interconnect.proto

package interconnect

import (
	context "context"
	messages "gitlab.com/xx_network/comms/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InterconnectClient is the client API for Interconnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InterconnectClient interface {
	GetNDF(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*NDF, error)
}

type interconnectClient struct {
	cc grpc.ClientConnInterface
}

func NewInterconnectClient(cc grpc.ClientConnInterface) InterconnectClient {
	return &interconnectClient{cc}
}

func (c *interconnectClient) GetNDF(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/interconnect.Interconnect/GetNDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterconnectServer is the server API for Interconnect service.
// All implementations must embed UnimplementedInterconnectServer
// for forward compatibility
type InterconnectServer interface {
	GetNDF(context.Context, *messages.Ping) (*NDF, error)
	mustEmbedUnimplementedInterconnectServer()
}

// UnimplementedInterconnectServer must be embedded to have forward compatible implementations.
type UnimplementedInterconnectServer struct {
}

func (UnimplementedInterconnectServer) GetNDF(context.Context, *messages.Ping) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNDF not implemented")
}
func (UnimplementedInterconnectServer) mustEmbedUnimplementedInterconnectServer() {}

// UnsafeInterconnectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InterconnectServer will
// result in compilation errors.
type UnsafeInterconnectServer interface {
	mustEmbedUnimplementedInterconnectServer()
}

func RegisterInterconnectServer(s grpc.ServiceRegistrar, srv InterconnectServer) {
	s.RegisterService(&Interconnect_ServiceDesc, srv)
}

func _Interconnect_GetNDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterconnectServer).GetNDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interconnect.Interconnect/GetNDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterconnectServer).GetNDF(ctx, req.(*messages.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

// Interconnect_ServiceDesc is the grpc.ServiceDesc for Interconnect service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interconnect_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "interconnect.Interconnect",
	HandlerType: (*InterconnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNDF",
			Handler:    _Interconnect_GetNDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interconnect.proto",
}
