// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gossip.proto

package gossip

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Generic response message providing an error message from remote servers
type Ack struct {
	Error                string   `protobuf:"bytes,1,opt,name=Error,proto3" json:"Error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{0}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// Generic message used for a variety of Gossip protocols
type GossipMsg struct {
	Tag                  string   `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Origin               []byte   `protobuf:"bytes,2,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Payload              []byte   `protobuf:"bytes,3,opt,name=Payload,proto3" json:"Payload,omitempty"`
	Signature            []byte   `protobuf:"bytes,4,opt,name=Signature,proto3" json:"Signature,omitempty"`
	Timestamp            int64    `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GossipMsg) Reset()         { *m = GossipMsg{} }
func (m *GossipMsg) String() string { return proto.CompactTextString(m) }
func (*GossipMsg) ProtoMessage()    {}
func (*GossipMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_878fa4887b90140c, []int{1}
}

func (m *GossipMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GossipMsg.Unmarshal(m, b)
}
func (m *GossipMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GossipMsg.Marshal(b, m, deterministic)
}
func (m *GossipMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GossipMsg.Merge(m, src)
}
func (m *GossipMsg) XXX_Size() int {
	return xxx_messageInfo_GossipMsg.Size(m)
}
func (m *GossipMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GossipMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GossipMsg proto.InternalMessageInfo

func (m *GossipMsg) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *GossipMsg) GetOrigin() []byte {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *GossipMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GossipMsg) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *GossipMsg) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Ack)(nil), "gossip.Ack")
	proto.RegisterType((*GossipMsg)(nil), "gossip.GossipMsg")
}

func init() {
	proto.RegisterFile("gossip.proto", fileDescriptor_878fa4887b90140c)
}

var fileDescriptor_878fa4887b90140c = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcf, 0x2f, 0x2e,
	0xce, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xa4, 0xb9, 0x98,
	0x1d, 0x93, 0xb3, 0x85, 0x44, 0xb8, 0x58, 0x5d, 0x8b, 0x8a, 0xf2, 0x8b, 0x24, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x20, 0x1c, 0xa5, 0x6e, 0x46, 0x2e, 0x4e, 0x77, 0xb0, 0x3a, 0xdf, 0xe2, 0x74,
	0x21, 0x01, 0x2e, 0xe6, 0x90, 0xc4, 0x74, 0xa8, 0x0a, 0x10, 0x53, 0x48, 0x8c, 0x8b, 0xcd, 0xbf,
	0x28, 0x33, 0x3d, 0x33, 0x4f, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xca, 0x13, 0x92, 0xe0,
	0x62, 0x0f, 0x48, 0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x91, 0x60, 0x06, 0x4b, 0xc0, 0xb8, 0x42, 0x32,
	0x5c, 0x9c, 0xc1, 0x99, 0xe9, 0x79, 0x89, 0x25, 0xa5, 0x45, 0xa9, 0x12, 0x2c, 0x60, 0x39, 0x84,
	0x00, 0x48, 0xb6, 0x24, 0x33, 0x37, 0xb5, 0xb8, 0x24, 0x31, 0xb7, 0x40, 0x82, 0x55, 0x81, 0x51,
	0x83, 0x39, 0x08, 0x21, 0x60, 0x94, 0xc0, 0xc5, 0x06, 0x71, 0x8c, 0x90, 0x16, 0x17, 0x87, 0x6b,
	0x5e, 0x4a, 0x41, 0x7e, 0x66, 0x5e, 0x89, 0x90, 0xa0, 0x1e, 0xd4, 0x5f, 0x70, 0x87, 0x4a, 0x71,
	0xc3, 0x84, 0x40, 0x3e, 0xd3, 0xe2, 0x62, 0x0b, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x25, 0xa4, 0x52,
	0x83, 0x31, 0x89, 0x0d, 0x1c, 0x36, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf5, 0x9d,
	0x2e, 0x2b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GossipClient interface {
	Endpoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Ack, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error)
}

type gossipClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipClient(cc grpc.ClientConnInterface) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Endpoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/gossip.Gossip/Endpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Gossip_serviceDesc.Streams[0], "/gossip.Gossip/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipStreamClient{stream}
	return x, nil
}

type Gossip_StreamClient interface {
	Send(*GossipMsg) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type gossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipStreamClient) Send(m *GossipMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipStreamClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipServer is the server API for Gossip service.
type GossipServer interface {
	Endpoint(context.Context, *GossipMsg) (*Ack, error)
	Stream(Gossip_StreamServer) error
}

// UnimplementedGossipServer can be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (*UnimplementedGossipServer) Endpoint(ctx context.Context, req *GossipMsg) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endpoint not implemented")
}
func (*UnimplementedGossipServer) Stream(srv Gossip_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterGossipServer(s *grpc.Server, srv GossipServer) {
	s.RegisterService(&_Gossip_serviceDesc, srv)
}

func _Gossip_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Gossip/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Endpoint(ctx, req.(*GossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).Stream(&gossipStreamServer{stream})
}

type Gossip_StreamServer interface {
	SendAndClose(*Ack) error
	Recv() (*GossipMsg, error)
	grpc.ServerStream
}

type gossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipStreamServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipStreamServer) Recv() (*GossipMsg, error) {
	m := new(GossipMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Gossip_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endpoint",
			Handler:    _Gossip_Endpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Gossip_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gossip.proto",
}
