///////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2020 xx network SEZC                                          //
//                                                                           //
// Use of this source code is governed by a license that can be found in the //
// LICENSE file                                                              //
///////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: interconnect.proto

package interconnect

import (
	context "context"
	messages "gitlab.com/xx_network/comms/messages"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The Network Definition File is defined as a
// JSON structure in primitives/ndf.
type NDF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ndf []byte `protobuf:"bytes,1,opt,name=Ndf,proto3" json:"Ndf,omitempty"`
}

func (x *NDF) Reset() {
	*x = NDF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_interconnect_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NDF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NDF) ProtoMessage() {}

func (x *NDF) ProtoReflect() protoreflect.Message {
	mi := &file_interconnect_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NDF.ProtoReflect.Descriptor instead.
func (*NDF) Descriptor() ([]byte, []int) {
	return file_interconnect_proto_rawDescGZIP(), []int{0}
}

func (x *NDF) GetNdf() []byte {
	if x != nil {
		return x.Ndf
	}
	return nil
}

var File_interconnect_proto protoreflect.FileDescriptor

var file_interconnect_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x1a, 0x33, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78,
	0x78, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x03, 0x4e, 0x44, 0x46, 0x12, 0x10,
	0x0a, 0x03, 0x4e, 0x64, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x4e, 0x64, 0x66,
	0x32, 0x3b, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4e, 0x44, 0x46, 0x12, 0x0e, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x1a, 0x11, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x44, 0x46, 0x42, 0x2a, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x78, 0x78, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x2f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_interconnect_proto_rawDescOnce sync.Once
	file_interconnect_proto_rawDescData = file_interconnect_proto_rawDesc
)

func file_interconnect_proto_rawDescGZIP() []byte {
	file_interconnect_proto_rawDescOnce.Do(func() {
		file_interconnect_proto_rawDescData = protoimpl.X.CompressGZIP(file_interconnect_proto_rawDescData)
	})
	return file_interconnect_proto_rawDescData
}

var file_interconnect_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_interconnect_proto_goTypes = []interface{}{
	(*NDF)(nil),           // 0: interconnect.NDF
	(*messages.Ping)(nil), // 1: messages.Ping
}
var file_interconnect_proto_depIdxs = []int32{
	1, // 0: interconnect.Interconnect.GetNDF:input_type -> messages.Ping
	0, // 1: interconnect.Interconnect.GetNDF:output_type -> interconnect.NDF
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_interconnect_proto_init() }
func file_interconnect_proto_init() {
	if File_interconnect_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_interconnect_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NDF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_interconnect_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_interconnect_proto_goTypes,
		DependencyIndexes: file_interconnect_proto_depIdxs,
		MessageInfos:      file_interconnect_proto_msgTypes,
	}.Build()
	File_interconnect_proto = out.File
	file_interconnect_proto_rawDesc = nil
	file_interconnect_proto_goTypes = nil
	file_interconnect_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InterconnectClient is the client API for Interconnect service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterconnectClient interface {
	GetNDF(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*NDF, error)
}

type interconnectClient struct {
	cc grpc.ClientConnInterface
}

func NewInterconnectClient(cc grpc.ClientConnInterface) InterconnectClient {
	return &interconnectClient{cc}
}

func (c *interconnectClient) GetNDF(ctx context.Context, in *messages.Ping, opts ...grpc.CallOption) (*NDF, error) {
	out := new(NDF)
	err := c.cc.Invoke(ctx, "/interconnect.Interconnect/GetNDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterconnectServer is the server API for Interconnect service.
type InterconnectServer interface {
	GetNDF(context.Context, *messages.Ping) (*NDF, error)
}

// UnimplementedInterconnectServer can be embedded to have forward compatible implementations.
type UnimplementedInterconnectServer struct {
}

func (*UnimplementedInterconnectServer) GetNDF(context.Context, *messages.Ping) (*NDF, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNDF not implemented")
}

func RegisterInterconnectServer(s *grpc.Server, srv InterconnectServer) {
	s.RegisterService(&_Interconnect_serviceDesc, srv)
}

func _Interconnect_GetNDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(messages.Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterconnectServer).GetNDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interconnect.Interconnect/GetNDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterconnectServer).GetNDF(ctx, req.(*messages.Ping))
	}
	return interceptor(ctx, in, info, handler)
}

var _Interconnect_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interconnect.Interconnect",
	HandlerType: (*InterconnectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNDF",
			Handler:    _Interconnect_GetNDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interconnect.proto",
}
