// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: gossip.proto

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipClient interface {
	Endpoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Ack, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error)
}

type gossipClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipClient(cc grpc.ClientConnInterface) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) Endpoint(ctx context.Context, in *GossipMsg, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/gossip.Gossip/Endpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gossipClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gossip_ServiceDesc.Streams[0], "/gossip.Gossip/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipStreamClient{stream}
	return x, nil
}

type Gossip_StreamClient interface {
	Send(*GossipMsg) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type gossipStreamClient struct {
	grpc.ClientStream
}

func (x *gossipStreamClient) Send(m *GossipMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipStreamClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipServer is the server API for Gossip service.
// All implementations must embed UnimplementedGossipServer
// for forward compatibility
type GossipServer interface {
	Endpoint(context.Context, *GossipMsg) (*Ack, error)
	Stream(Gossip_StreamServer) error
	mustEmbedUnimplementedGossipServer()
}

// UnimplementedGossipServer must be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (UnimplementedGossipServer) Endpoint(context.Context, *GossipMsg) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Endpoint not implemented")
}
func (UnimplementedGossipServer) Stream(Gossip_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedGossipServer) mustEmbedUnimplementedGossipServer() {}

// UnsafeGossipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServer will
// result in compilation errors.
type UnsafeGossipServer interface {
	mustEmbedUnimplementedGossipServer()
}

func RegisterGossipServer(s grpc.ServiceRegistrar, srv GossipServer) {
	s.RegisterService(&Gossip_ServiceDesc, srv)
}

func _Gossip_Endpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GossipMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GossipServer).Endpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gossip.Gossip/Endpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GossipServer).Endpoint(ctx, req.(*GossipMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gossip_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).Stream(&gossipStreamServer{stream})
}

type Gossip_StreamServer interface {
	SendAndClose(*Ack) error
	Recv() (*GossipMsg, error)
	grpc.ServerStream
}

type gossipStreamServer struct {
	grpc.ServerStream
}

func (x *gossipStreamServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipStreamServer) Recv() (*GossipMsg, error) {
	m := new(GossipMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gossip_ServiceDesc is the grpc.ServiceDesc for Gossip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gossip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Endpoint",
			Handler:    _Gossip_Endpoint_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Gossip_Stream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "gossip.proto",
}
