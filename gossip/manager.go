package gossip

import (
	"gitlab.com/elixxir/primitives/id"
	"gitlab.com/xx_network/comms/connect"
	"google.golang.org/grpc"
	"sync"
	"time"
)

// Structure holding messages for a given tag, if the tag does not yet exist
// If the tag is not created in 5 minutes, the record should be deleted
type MessageRecord struct {
	Timestamp *time.Time
	Messages  []*GossipMsg
}

// Manager for various GossipProtocols that are accessed by tag
type Manager struct {
	// Stored map of GossipProtocols
	protocols    map[string]*Protocol
	protocolLock *sync.RWMutex // Lock for protocols object

	// Buffer messages with tags that do not have a protocol created yet
	buffer     map[string]*MessageRecord
	bufferLock *sync.RWMutex // Lock for buffers object
}

// Passed into NewGossip to specify how Gossip messages will be handled
type Receiver func(*GossipMsg) error

// Passed into NewGossip to specify how Gossip message signatures will be verified
type SignatureVerification func(*GossipMsg, []byte) error

// Creates and stores a new Protocol in the Manager
func (m *Manager) NewGossip(comms *connect.ProtoComms, tag string, flags Flags,
	receiver Receiver, verifier SignatureVerification, peers []*id.ID) {
	m.protocolLock.Lock()
	defer m.protocolLock.Unlock()

	tmp := Protocol{
		comms:     comms,
		peers:     peers,
		flags:     DefaultFlags(),
		receiver:  receiver,
		verify:    verifier,
		IsDefunct: false,
	}

	m.protocols[tag] = &tmp
}

// Registers the Gossip service with the endpoints. Both of these inputs
// are autogenerated by GRPC and may look different
func (m *Manager) GRPCRegister(s *grpc.Server, gs *GossipServer) {
	RegisterGossipServer(s, *gs)
}

// Returns the Gossip object for the provided tag from the Manager
func (m *Manager) Get(tag string) *Protocol {
	m.protocolLock.RLock()
	defer m.protocolLock.RUnlock()

	return m.protocols[tag]
}

// Deletes a Protocol from the Manager
func (m *Manager) Delete(tag string) {
	m.protocolLock.Lock()
	defer m.protocolLock.Unlock()

	delete(m.protocols, tag)
}

// Marks a Protocol as Defunct such that it will ignore new messages
func (m *Manager) Defunct(tag string) {
	m.protocolLock.Lock()
	defer m.protocolLock.Unlock()

	m.protocols[tag].IsDefunct = true
}

// Long-running thread to delete any messages in buffer older than 5m
func (m *Manager) bufferMonitor() error {
	return nil
}
